# name: Deploy Backend Services

# on:
#   push:
#     branches:
#       - main  # Adjust to your target branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Setup SSH
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.JJ_SERVER_SSH_PRIVATE_KEY }}
#           SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
#           SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
#         run: |
#           mkdir -p ~/.ssh
#           echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
#           chmod 600 ~/.ssh/id_ed25519
#           ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

#       - name: Test SSH Connection
#         env:
#           SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
#           SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
#         run: |
#           ssh -i ~/.ssh/id_ed25519 $SERVER_USER@$SERVER_IP echo "SSH connection successful."
  
#       - name: Build and Deploy
#         env:
#           SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
#           SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
#         run: |
#           ssh -i ~/.ssh/id_ed25519 $SERVER_USER@$SERVER_IP \
#             "cd jobjays/source/Team-JobJays && git pull && cd backend/production && docker compose up --build -d" 

name: Deploy Backend Services

on:
  push:
    branches:
      - main  # Adjust to your target branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.JJ_SERVER_SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
          SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        env:
          SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
          SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
        run: |
          ssh -i ~/.ssh/id_ed25519 $SERVER_USER@$SERVER_IP echo "SSH connection successful."
  
      - name: Deploy Services with Screen
        env:
          SERVER_USER: ${{ secrets.JJ_SERVER_USERNAME }}
          SERVER_IP: ${{ secrets.HOST_JJ_SERVER_IP }}
        run: |
          ssh -i ~/.ssh/id_ed25519 $SERVER_USER@$SERVER_IP <<'EOF'
            set -e  # Exit immediately if a command exits with a non-zero status
            cd jobjays/source/Team-JobJays/backend

            # Paths for each service
            declare -A services
            services["job-jays-api"]=""
            services["applicant-job-matcher"]="applicant_job_matcher"
            services["preference-updater"]="preference_updater"
            services["notification-sender"]="notification_sender"

            # Maven services
            maven_services=("job-jays-api")

            # Check each service
            for service in "${!services[@]}"; do
              session_name=$service
              service_path=${services[$service]}

              # If screen session exists, kill it properly
              if screen -list | grep -q "$session_name"; then
                echo "Stopping existing screen session for $service..."
                screen -S "$session_name" -X exit
              fi

              # Create and start a new screen session
              echo "Starting new screen session for $service..."
              if [[ " ${maven_services[@]} " =~ " ${service} " ]]; then
                # Maven-based service
                screen -dmS "$session_name" bash -c "cd $service_path && mvn spring-boot:run"
              else
                # Gradle-based service
                screen -dmS "$session_name" bash -c "cd $service_path && gradle build && java -jar /build/libs/*SNAPSHOT.jar"
              fi
            done

            echo "All services deployed and running in separate screen sessions."

